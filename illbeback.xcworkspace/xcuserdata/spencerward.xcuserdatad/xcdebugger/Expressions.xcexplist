<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "static Global.storeDeviceToken() -&gt; ():Global.swift">
         <PersistentStrings>
            <PersistentString
               value = "Global.deviceToken">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "__41-[LLSimpleCamera capture:exactSeenImage:]_block_invoke:LLSimpleCamera.m">
         <PersistentStrings>
            <PersistentString
               value = "image.size">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "MapController.updateButtonStates():MapController.swift">
         <PersistentStrings>
            <PersistentString
               value = "flagRepository.new()">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Modal.slideVertically(_:start:end:hide:):Modal.swift">
         <PersistentStrings>
            <PersistentString
               value = "parentView.layoutMargins.top">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "static Global.(storeDeviceToken(Bool, userName : String?, onSuccess : () -&gt; (), onFailure : () -&gt; ()) -&gt; ()).(closure #1):Global.swift">
         <PersistentStrings>
            <PersistentString
               value = "existingToken! as! String">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "ZoomController.viewWillAppear(_:):ZoomController.swift">
      </ContextState>
      <ContextState
         contextName = "InBox.(downloadImages(Flag, onComplete : () -&gt; ()) -&gt; ()).(closure #1):InBox.swift">
         <PersistentStrings>
            <PersistentString
               value = "imageUrl.lastPathComponent">
            </PersistentString>
            <PersistentString
               value = "downloadingurl.path">
            </PersistentString>
            <PersistentString
               value = "error!">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "FlagToken.init(token : String) -&gt; FlagToken:FlagToken.swift">
      </ContextState>
      <ContextState
         contextName = "I_ll_Be_Back.MemoriesController.zoomPicture (I_ll_Be_Back.MemoriesController)(I_ll_Be_Back.MapPinView) -&gt; ():MemoriesController.swift">
         <PersistentStrings>
            <PersistentString
               value = "zoomController">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Flag.when() -&gt; Date?:Flag.swift">
         <PersistentStrings>
            <PersistentString
               value = "_token.when()">
            </PersistentString>
            <PersistentString
               value = "_token.whenUpdate() as Date? ?? _token.when() as Date?">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "static I_ll_Be_Back.CategoryController.getColorForCategory (I_ll_Be_Back.CategoryController.Type)(Swift.String) -&gt; ObjectiveC.UIColor:CategoryController.swift">
         <PersistentStrings>
            <PersistentString
               value = "button.currentTitle!!">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #1 in RememberController.viewDidLoad():RememberController.swift">
         <PersistentStrings>
            <PersistentString
               value = "image.size">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "InBox.postPhotoDownload(String, imageUrl : URL, task : AWSTask&lt;AWSS3TransferUtilityDownloadTask&gt;) -&gt; ():InBox.swift">
         <PersistentStrings>
            <PersistentString
               value = "task.error">
            </PersistentString>
            <PersistentString
               value = "task.exception">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "I_ll_Be_Back.MapPinView.(hitButton in _120B66E1E93D0B724A79960A6F797684) (I_ll_Be_Back.MapPinView)(C.CGPoint, button : Swift.Optional&lt;ObjectiveC.UIView&gt;) -&gt; Swift.Bool:MapPinView.swift">
         <PersistentStrings>
            <PersistentString
               value = "button!.frame">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "-[UIImage(fixOrientation) fixOrientation]:UIImage+FixOrientation.m">
      </ContextState>
      <ContextState
         contextName = "ZoomController.rotate(_:):ZoomController.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.photo!.image">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Camera.captureImage(completion:):Camera.swift">
         <PersistentStrings>
            <PersistentString
               value = "photoOutputConnection.videoOrientation">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "FlagRepository.onFlagChanged(Notification) -&gt; ():FlagRepository.swift">
      </ContextState>
      <ContextState
         contextName = "-[LLSimpleCamera cropImageUsingPreviewBounds:]:LLSimpleCamera.m">
         <PersistentStrings>
            <PersistentString
               value = "self.captureVideoPreviewLayer.bounds">
            </PersistentString>
            <PersistentString
               value = "image.size">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "I_ll_Be_Back.Camera.(takePhoto (I_ll_Be_Back.Camera) -&gt; (Swift.ImplicitlyUnwrappedOptional&lt;ObjectiveC.UIButton&gt;) -&gt; ()).(closure #3):Camera.swift">
         <PersistentStrings>
            <PersistentString
               value = "(UIImage?)image">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "OutBox.(uploadImage(String?, key : String, onComplete : () -&gt; (), onError : () -&gt; ()) -&gt; ()).(closure #1).(closure #1):OutBox.swift">
         <PersistentStrings>
            <PersistentString
               value = "task!.error">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "I_ll_Be_Back.MapPinView.hitTest (I_ll_Be_Back.MapPinView)(C.CGPoint, withEvent : Swift.Optional&lt;ObjectiveC.UIEvent&gt;) -&gt; Swift.Optional&lt;ObjectiveC.UIView&gt;:MapPinView.swift">
         <PersistentStrings>
            <PersistentString
               value = "elapsed">
            </PersistentString>
            <PersistentString
               value = "self.selected">
            </PersistentString>
            <PersistentString
               value = "event!.type">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Photo.init(imagePath : String) throws -&gt; Photo:Photo.swift">
      </ContextState>
      <ContextState
         contextName = "ZoomSwipeController.goBack(_:):ZoomSwipeController.swift">
      </ContextState>
      <ContextState
         contextName = "FlagCallout.createLabelView() -&gt; ():FlagCallout.swift">
         <PersistentStrings>
            <PersistentString
               value = "flag?.when() ">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Camera.capture(_:didFinishProcessingPhotoSampleBuffer:previewPhotoSampleBuffer:resolvedSettings:bracketSettings:error:):Camera.swift">
         <PersistentStrings>
            <PersistentString
               value = "image.size">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #3 in Camera.takePhoto(_:):Camera.swift">
         <PersistentStrings>
            <PersistentString
               value = "modifiedImage!.width">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "Camera.imagePickerController(_:didFinishPickingMediaWithInfo:):Camera.swift">
         <PersistentStrings>
            <PersistentString
               value = "zoomController.view.subviews[0]">
            </PersistentString>
            <PersistentString
               value = "zoomController.view">
            </PersistentString>
            <PersistentString
               value = "zoomController.photo!">
            </PersistentString>
            <PersistentString
               value = "zoomController.photo.image">
            </PersistentString>
            <PersistentString
               value = "zoomController.photo">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
   </ContextStates>
</VariablesViewState>
